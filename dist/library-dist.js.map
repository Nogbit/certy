{"version":3,"sources":["library-dist.js"],"names":[],"mappings":"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","file":"library-dist.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('fs')) :\n  typeof define === 'function' && define.amd ? define(['fs'], factory) :\n  global.certy = factory(global.fs)\n}(this, function (fs) { 'use strict';\n\n  var ssl__commands = {\n    list: function (input, output) {\n    return {\n   ca: `openssl req -new -x509 -days 9999 -config ${input}/ca.cnf -keyout ${output}/ca-key.pem -out ${output}/ca-crt.pem`,\n\n   serverKey: `openssl genrsa -out ${output}/server-key.pem 4096`,\n\n   serverCSR: `openssl req -new -config ${input}/ca.cnf -key ${output}/server-key.pem -out ${output}/server-csr.pem`,\n\n   serverSign: `openssl x509 -req -extfile ${input}/ca.cnf -days 999 -passin \"pass:password\" -in ${output}/server-csr.pem -CA ${output}/ca-crt.pem -CAkey ${output}/ca-key.pem -CAcreateserial -out ${output}/server-crt.pem`,\n\n   clientKey: `openssl genrsa -out ${output}/client-key.pem 4096`,\n\n   clientCSR: `openssl req -new -config ${input}/client.cnf -key ${output}/client-key.pem -out ${output}/client-csr.pem`,\n\n   clientSign: `openssl x509 -req -extfile ${input}/client.cnf -days 999 -passin \"pass:password\" -in ${output}/client-csr.pem -CA ${output}/ca-crt.pem -CAkey ${output}/ca-key.pem -CAcreateserial -out ${output}/client-crt.pem`\n    };\n  }};\n\n  var ssl = ssl__commands;\n\n  var exec  = require('child_process').exec;\n  const certy = {\n    create(cb) {\n      var path   = __dirname;\n      var output = '';\n      var input  = '';\n      if (path.indexOf('/src', path.length - 4) > 0) {\n        output = path.replace('/src', '/output');\n        input = path.replace('/src', '/input');\n      } else {\n        output = path.replace('/dist', '/output');\n        input = path.replace('/dist', '/input');\n      }\n\n      let commands = ssl.list(input, output);\n\n      // Create our certificate authority\n      exec(commands.ca, () => {\n        // Create server private key\n        exec(commands.serverKey, () => {\n          // Create a CSR\n          exec(commands.serverCSR, () => {\n            // Sing the request\n            exec(commands.serverSign, () => {\n              // create client private key\n              exec(commands.clientKey, () => {\n                // create the CSR\n                exec(commands.clientCSR, () => {\n                  // sign the request...using the same CA\n                  exec(commands.clientSign, () => {\n\n                    var certs = {\n                      serverKey: fs.readFileSync(`${output}/server-key.pem`),\n                      serverCert: fs.readFileSync(`${output}/server-crt.pem`),\n                      clientCert: fs.readFileSync(`${output}/client-crt.pem`),\n                      clientKey: fs.readFileSync(`${output}/client-key.pem`),\n                      ca: fs.readFileSync(`${output}/ca-crt.pem`)\n                    };\n                    cb(null, certs);\n\n                    return;\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n      return;\n    }\n  };\n\n  var index = certy;\n\n  return index;\n\n}));\n"],"sourceRoot":"/source/"}